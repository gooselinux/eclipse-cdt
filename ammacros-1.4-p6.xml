<!-- This file automatically generated by ParseAutomakeTexinfo utility -->
<!-- cvs -d:pserver:anonymous@sources.redhat.com:/cvs/eclipse \        -->
<!--   co autotools/ParseTexinfo                                       -->
<!-- Additional edit was made because automake-1.4-p6 documentation    -->
<!-- does not put prototype of AM_INIT_AUTOMAKE in form that can be    -->
<!-- automatically pulled.                                             -->
<!DOCTYPE macros [

  <!ELEMENT macros (macro)*>

  <!ELEMENT macro (prototype*,synopsis)>
  <!ATTLIST macro
    id ID #REQUIRED
  >

  <!ELEMENT synopsis     (#PCDATA)*>

  <!ELEMENT prototype    (parameter+)?>

  <!ELEMENT parameter (#PCDATA)*>
  <!ATTLIST parameter
    content CDATA #REQUIRED
  >

]>

<macros>
  <macro id="AM_CONFIG_HEADER">
      <prototype>
      </prototype>
        <synopsis>
         Automake will generate rules to automatically regenerate the
         config header.  If you do use this macro, you must create the
         file &lt;TT&gt;stamp-h.in&lt;/TT&gt; in your source directory. 
         It can be empty.  &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_ENABLE_MULTILIB">
      <prototype>
      </prototype>
        <synopsis>
         This is used when a ``multilib'' library is being built.  A
         multilib library is one that is built multiple times, once per
         target flag combination.  This is only useful when the library
         is intended to be cross-compiled.  The first optional argument
         is the name of the &lt;TT&gt;Makefile&lt;/TT&gt; being
         generated; it defaults to &lt;samp&gt;Makefile&lt;/samp&gt;. The
         second option argument is used to find the top source directory;
         it defaults to the empty string (generally this should not be
         used unless you are familiar with the internals).
         &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_FUNC_STRTOD">
      <prototype>
      </prototype>
        <synopsis>
         If the &lt;CODE&gt;strtod&lt;/CODE&gt; function is not
         available, or does not work correctly (like the one on SunOS
         5.4), add &lt;TT&gt;strtod.o&lt;/TT&gt; to output variable
         &lt;CODE&gt;LIBOBJS&lt;/CODE&gt;.  &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_FUNC_ERROR_AT_LINE">
      <prototype>
      </prototype>
        <synopsis>
         If the function &lt;CODE&gt;error_at_line&lt;/CODE&gt; is not
         found, then add &lt;TT&gt;error.o&lt;/TT&gt; to
         &lt;CODE&gt;LIBOBJS&lt;/CODE&gt;.  &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_FUNC_MKTIME">
      <prototype>
      </prototype>
        <synopsis>
         Check for a working &lt;CODE&gt;mktime&lt;/CODE&gt; function. 
         If not found, add &lt;TT&gt;mktime.o&lt;/TT&gt; to
         &lt;samp&gt;LIBOBJS&lt;/samp&gt;.  &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_FUNC_OBSTACK">
      <prototype>
      </prototype>
        <synopsis>
         Check for the GNU obstacks code; if not found, add
         &lt;TT&gt;obstack.o&lt;/TT&gt; to
         &lt;samp&gt;LIBOBJS&lt;/samp&gt;.  &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_C_PROTOTYPES">
      <prototype>
      </prototype>
        <synopsis>
         Check to see if function prototypes are understood by the
         compiler.  If so, define &lt;samp&gt;PROTOTYPES&lt;/samp&gt; and
         set the output variables &lt;samp&gt;U&lt;/samp&gt; and
         &lt;samp&gt;ANSI2KNR&lt;/samp&gt; to the empty string. 
         Otherwise, set &lt;samp&gt;U&lt;/samp&gt; to
         &lt;samp&gt;_&lt;/samp&gt; and &lt;samp&gt;ANSI2KNR&lt;/samp&gt;
         to &lt;samp&gt;./ansi2knr&lt;/samp&gt;.  Automake uses these
         values to implement automatic de-ANSI-fication. 
         &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_HEADER_TIOCGWINSZ_NEEDS_SYS_IOCTL">
      <prototype>
      </prototype>
        <synopsis>
         If the use of &lt;CODE&gt;TIOCGWINSZ&lt;/CODE&gt; requires
         &lt;TT&gt;&lt;sys/ioctl.h&gt;&lt;/TT&gt;, then define
         &lt;CODE&gt;GWINSZ_IN_SYS_IOCTL&lt;/CODE&gt;.  Otherwise
         &lt;CODE&gt;TIOCGWINSZ&lt;/CODE&gt; can be found in
         &lt;TT&gt;&lt;termios.h&gt;&lt;/TT&gt;.  &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_INIT_AUTOMAKE">
      <prototype>
        <parameter content="PACKAGE"/>
        <parameter content="VERSION"/>
        <parameter content="[NO-DEFINE]"/>
      </prototype>
        <synopsis>
         Runs many macros that most &lt;TT&gt;configure.in&lt;/TT&gt;'s
         need.  This macro has two required arguments, the package and
         the version number.  By default this macro
         &lt;CODE&gt;AC_DEFINE&lt;/CODE&gt;'s
         &lt;samp&gt;PACKAGE&lt;/samp&gt; and
         &lt;samp&gt;VERSION&lt;/samp&gt;.  This can be avoided by
         passing in a non-empty third argument. &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_PATH_LISPDIR">
      <prototype>
      </prototype>
        <synopsis>
         Searches for the program &lt;CODE&gt;emacs&lt;/CODE&gt;, and, if
         found, sets the output variable &lt;CODE&gt;lispdir&lt;/CODE&gt;
         to the full path to Emacs' site-lisp directory. 
         &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_PROG_CC_STDC">
      <prototype>
      </prototype>
        <synopsis>
         If the C compiler in not in ANSI C mode by default, try to add
         an option to output variable &lt;CODE&gt;CC&lt;/CODE&gt; to make
         it so.  This macro tries various options that select ANSI C on
         some system or another.  It considers the compiler to be in ANSI
         C mode if it handles function prototypes correctly.
         &lt;br&gt;&lt;br&gt; If you use this macro, you should check
         after calling it whether the C compiler has been set to accept
         ANSI C; if not, the shell variable
         &lt;CODE&gt;am_cv_prog_cc_stdc&lt;/CODE&gt; is set to
         &lt;samp&gt;no&lt;/samp&gt;.  If you wrote your source code in
         ANSI C, you can make an un-ANSIfied copy of it by using the
         &lt;CODE&gt;ansi2knr&lt;/CODE&gt; option (ANSI).
         &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_PROG_LEX">
      <prototype>
      </prototype>
        <synopsis>
           Like &lt;CODE&gt;AC_PROG_LEX&lt;/CODE&gt; with
         &lt;CODE&gt;AC_DECL_YYTEXT&lt;/CODE&gt; (@pxref{Particular
         Programs, , Particular Program Checks, autoconf, The Autoconf
         Manual}), but uses the &lt;CODE&gt;missing&lt;/CODE&gt; script
         on systems that do not have &lt;CODE&gt;lex&lt;/CODE&gt;. 
         &lt;samp&gt;HP-UX 10&lt;/samp&gt; is one such system.
         &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_SANITY_CHECK">
      <prototype>
      </prototype>
        <synopsis>
         This checks to make sure that a file created in the build
         directory is newer than a file in the source directory.  This
         can fail on systems where the clock is set incorrectly.  This
         macro is automatically run from
         &lt;CODE&gt;AM_INIT_AUTOMAKE&lt;/CODE&gt;. &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_SYS_POSIX_TERMIOS">
      <prototype>
      </prototype>
        <synopsis>
            Check to see if POSIX termios headers and functions are
         available on the system.  If so, set the shell variable
         &lt;CODE&gt;am_cv_sys_posix_termios&lt;/CODE&gt; to
         &lt;samp&gt;yes&lt;/samp&gt;.  If not, set the variable to
         &lt;samp&gt;no&lt;/samp&gt;. &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_TYPE_PTRDIFF_T">
      <prototype>
      </prototype>
        <synopsis>
           Define &lt;samp&gt;HAVE_PTRDIFF_T&lt;/samp&gt; if the type
         &lt;samp&gt;ptrdiff_t&lt;/samp&gt; is defined in
         &lt;TT&gt;&lt;stddef.h&gt;&lt;/TT&gt;. &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_WITH_DMALLOC">
      <prototype>
      </prototype>
        <synopsis>
            Add support for the &lt;A
         HREF="ftp://ftp.letters.com/src/dmalloc/dmalloc.tar.gz&gt;dmalloc&lt;/A&gt;
         package.  If the user configures with
         &lt;samp&gt;--with-dmalloc&lt;/samp&gt;, then define
         &lt;CODE&gt;WITH_DMALLOC&lt;/CODE&gt; and add
         &lt;samp&gt;-ldmalloc&lt;/samp&gt; to
         &lt;CODE&gt;LIBS&lt;/CODE&gt;. &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_WITH_REGEX">
      <prototype>
      </prototype>
        <synopsis>
             Adds &lt;samp&gt;--with-regex&lt;/samp&gt; to the
         &lt;CODE&gt;configure&lt;/CODE&gt; command line.  If specified
         (the default), then the &lt;samp&gt;regex&lt;/samp&gt; regular
         expression library is used, &lt;TT&gt;regex.o&lt;/TT&gt; is put
         into &lt;samp&gt;LIBOBJS&lt;/samp&gt;, and
         &lt;samp&gt;WITH_REGEX&lt;/samp&gt; is defined..  If
         &lt;samp&gt;--without-regex&lt;/samp&gt; is given, then the
         &lt;samp&gt;rx&lt;/samp&gt; regular expression library is used,
         and &lt;TT&gt;rx.o&lt;/TT&gt; is put into
         &lt;samp&gt;LIBOBJS&lt;/samp&gt;. &lt;br&gt;&lt;br&gt;
         &lt;/DL&gt; &lt;br&gt;&lt;br&gt; &lt;br&gt;&lt;br&gt; @node
         Extending aclocal,  , Macros, configure
        </synopsis>
  </macro>
</macros>
